{"version":3,"sources":["../../server/controllers/dummyControllerTransaction.js"],"names":["DummyControllerTransaction","req","res","status","json","message","data","transactionStore","accountNumber","params","existingAccount","accountStore","find","account","parseInt","body","amount","cachier","transactionAdded","id","length","createdOn","Date","now","type","oldBalance","balance","newBalance","push","error"],"mappings":"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","sourcesContent":["import accountStore from '../utilities/dummyData/account';\nimport transactionStore from '../utilities/dummyData/transaction';\n\n\n/**\n * @exports\n * @class DummyControllerTransaction\n */\nclass DummyControllerTransaction {\n  /**\n     * @description get all transactions\n     * @staticmethod getAllTransactions\n     * @param  {object} req - req object\n     * @param {object} res - Response object\n     * @return {json} res.json\n     */\n  static getAllTransactions(req, res) {\n    res.status(200).json({\n      message: 'Successfully fetched all Transactions',\n      status: 200,\n      data: transactionStore,\n    });\n  }\n\n\n  /**\n     * @description credit an account\n     * @staticmethod\\ CreditAccount\n     * @param  {object} req - req object\n     * @param {object} res - Response object\n     * @return {json} res.json\n     */\n  static CreditAccount(req, res) {\n    const {\n      accountNumber,\n    } = req.params;\n    const existingAccount = accountStore.find(account => account.accountNumber === parseInt(accountNumber, 10));\n\n    if (existingAccount) {\n      const {\n        amount,\n        cachier,\n      } = req.body;\n      const transactionAdded = {\n        id: transactionStore.length + 1,\n        createdOn: Date.now(),\n        type: 'credit',\n        accountNumber,\n        cachier,\n        amount,\n        oldBalance: existingAccount.balance,\n        newBalance: existingAccount.balance + amount,\n      };\n\n      transactionStore.push(transactionAdded);\n      return res.status(201).json({\n        status: 201,\n        data: {\n          ...transactionAdded,\n        },\n      });\n    }\n    return res.status(404).json({\n      status: 404,\n      error: 'This account  does not exist',\n    });\n  }\n\n\n  /**\n     * @description debit an account\n     * @staticmethod DebitAccount\n     * @param  {object} req - req object\n     * @param {object} res - Response object\n     * @return {json} res.json\n     */\n  static DebitAccount(req, res) {\n    const {\n      accountNumber,\n    } = req.params;\n    const existingAccount = accountStore.find(account => account.accountNumber === parseInt(accountNumber, 10));\n\n    if (existingAccount) {\n      const {\n        amount,\n        cachier,\n      } = req.body;\n\n      const oldBalance = existingAccount.balance;\n      if (amount > oldBalance) {\n        return res.status(400).json({\n          status: 400,\n          error: 'insufficent account balance',\n        });\n      }\n      const transactionAdded = {\n        id: transactionStore.length + 1,\n        createdOn: Date.now(),\n        type: 'debit',\n        accountNumber,\n        cachier,\n        amount,\n        oldBalance: existingAccount.balance,\n        newBalance: existingAccount.balance - amount,\n      };\n\n      transactionStore.push(transactionAdded);\n      return res.status(201).json({\n        status: 201,\n        data: {\n          ...transactionAdded,\n        },\n      });\n    }\n    return res.status(400).json({\n      status: 400,\n      error: 'This account  does not exist',\n    });\n  }\n}\n\n\nexport default DummyControllerTransaction;\n"],"file":"dummyControllerTransaction.js"}