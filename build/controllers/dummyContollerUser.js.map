{"version":3,"sources":["../../server/controllers/dummyContollerUser.js"],"names":["DummyControllerUser","req","res","existingUsers","dataStore","status","json","message","data","body","firstName","lastName","email","phoneNumber","password","type","isAdmin","user","find","passwordhashed","helperClass","hashPassword","users","id","length","push","token","generateToken","header","userEmail","userPassword","userChecked","console","log","foundUserPassword","compare","error"],"mappings":"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","sourcesContent":["import helperClass from '../utilities/dummyHelper';\nimport dataStore from '../utilities/dummyData/user';\n\n/**\n * @exports\n * @class DummyControllerUser\n */\nclass DummyControllerUser {\n  /**\n   * @description get all users\n   * @staticmethod getAllUsers\n   * @param  {object} req - req object\n   * @param {object} res - Response object\n   * @return {json} res.json\n   */\n\n  static getAllUsers(req, res) {\n    const existingUsers = dataStore;\n    res.status(200).json({\n      message: 'Successfully fetched all users',\n      status: 200,\n      data: existingUsers,\n    });\n  }\n\n\n  /**\n   * @description Signup a new user\n   * @staticmethod userSignup\n   * @param  {object} req - req object\n   * @param {object} res - Response object\n   * @return {json} res.json\n   */\n\n  static userSignup(req, res) {\n    const {\n      firstName,\n      lastName,\n      email,\n      phoneNumber,\n      password,\n      type,\n      isAdmin,\n    } = req.body;\n\n    const user = dataStore.find(email => email.email === email);\n\n    if (user) {\n      return res.status(400).json({\n        status: 400,\n        message: 'email already exits',\n      });\n    }\n\n\n    const passwordhashed =  helperClass.hashPassword(password);\n\n    // const passwordhashed = helperClass.hashPassword(password);\n\n    const users = {\n      id: dataStore.length + 1,\n      email,\n      firstName,\n      lastName,\n      phoneNumber,\n      password: passwordhashed,\n      type,\n      isAdmin,\n    };\n\n    dataStore.push(users);\n\n\n    const token = helperClass.generateToken({\n      email,\n      type,\n    });\n\n    return res.header('x-access-token', token).status(201).json({\n      status: 201,\n      data: {\n        token,\n        id: users.id,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        email: users.email,\n        password: users.password,\n\n      },\n      message: 'New user created successfully',\n\n\n    });\n  }\n\n  /**\n   * @description Login a new user\n   * @staticmethod userLogin\n   * @param  {object} req - req object\n   * @param {object} res - Response object\n   * @return {json} res.json\n   */\n  static userLogin(req, res) {\n    const {\n      email: userEmail,\n      password: userPassword,\n    } = req.body;\n    const userChecked = dataStore.find(user => user.email === userEmail);\n    if (userChecked) {\n      console.log(userChecked);\n      const {\n        email,\n        type,\n        firstName,\n        lastName,\n        id,\n        password,\n      } = userChecked;\n\n\n      const foundUserPassword = helperClass.compare(userPassword, password);\n\n      if (foundUserPassword) {\n        const token = helperClass.generateToken({\n          id,\n          email,\n          type,\n        });\n        return res.header('x-access-token', token).status(200).json({\n          status: 200,\n          data: {\n            token,\n            id,\n            firstName,\n            lastName,\n            email,\n            type,\n          },\n          message: 'Authentication Successful',\n        });\n      }\n      return res.status(400).json({\n        status: 404,\n        error: 'please type in the correct Password ',\n      });\n    }\n    return res.status(400).json({\n      status: 404,\n      error: 'please input the correct email',\n    });\n  }\n}\n\n\nexport default DummyControllerUser;"],"file":"dummyContollerUser.js"}