{"version":3,"sources":["../../server/tests/userDummy.test.js"],"names":["chai","use","chaiHttp","should","describe","it","done","request","server","get","end","err","res","body","have","property","to","equals","be","an","post","send","email","firstName","lastName","phoneNumber","password","type","isAdmin","status"],"mappings":"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","sourcesContent":["import chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport server from '../app';\n\nchai.use(chaiHttp);\nchai.should();\n\ndescribe('UNIT TESTS FOR DUMMY USER CONTROLLERS', () => {\n  /*\n   * Test the /GET route\n   */\n  describe('/GET REQUEST', () => {\n    it('it should GET all users', (done) => {\n      chai\n        .request(server)\n        .get('/api/v1/getUsers/')\n        .end((err, res) => {\n          res.body.should.have\n            .property('message')\n            .to.equals('Successfully fetched all users');\n          res.should.have.property('status').to.equals(200);\n          res.body.should.have.property('data').to.be.an('array');\n          done();\n        });\n    });\n  });\n  describe('/POST REQUEST', () => {\n    it('it should signup user ', (done) => {\n      chai\n        .request(server)\n        .post('/api/v1/auth/signup')\n        .send({\n          email: 'tolaniabass@gmail.com',\n          firstName: 'Tolani',\n          lastName: 'Abass',\n          phoneNumber: '08023461217',\n          password: 'tolaniabass',\n          type: 'client',\n          isAdmin: false,\n        })\n        .end((err, res) => {\n          res.should.have.status(201);\n          res.body.should.have.property('status').to.equals(201);\n          res.body.should.have.property('data').to.be.an('object');\n          res.body.should.have\n            .property('message')\n            .to.equals('New user created successfully');\n\n          done();\n        });\n    });\n  });\n\n  describe('/POST REQUEST', () => {\n    it('it should signin user ', (done) => {\n      chai\n        .request(server)\n        .post('/api/v1/auth/signin')\n        .send({\n          email: 'tolaniabass@gmail.com',\n          password: 'tolaniabass',\n        })\n        .end((err, res) => {\n          res.should.have.status(200);\n          res.body.should.have.property('status').to.equals(200);\n          res.body.should.have.property('data').to.be.an('object');\n          res.body.should.have\n            .property('message')\n            .to.equals('Authentication Successful');\n\n          done();\n        });\n    });\n\n    it('it should not login unregistered user ', (done) => {\n      chai\n        .request(server)\n        .post('/api/v1/auth/login')\n        .send({\n          email: 'danielimodoye@gmail.com',\n          password: 'danielimodoye',\n        })\n        .end((err, res) => {\n          res.should.have.status(404);\n\n          done();\n        });\n    });\n    it('it should make a post request if all fields are not empty ', (done) => {\n      chai\n        .request(server)\n        .post('/api/v1/auth/signup')\n        .send({\n          email: 'danielimodoye@gmail.com',\n          firstName: 'Imodoye',\n          lastName: 'David',\n          phoneNumber: '08023461217',\n          password: 'danielimodoye',\n          type: 'client',\n          isAdmin: false,\n        })\n        .end((err, res) => {\n          res.body.should.have\n            .property('message')\n            .to.equals('New user created successfully');\n          res.body.should.have.property('status').to.equals(201);\n          // res.body.should.have.property('token').to.be.a('string');\n          done();\n        });\n    });\n  });\n});\n"],"file":"userDummy.test.js"}