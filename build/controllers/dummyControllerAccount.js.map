{"version":3,"sources":["../../server/controllers/dummyControllerAccount.js"],"names":["DummyControllerAcccount","req","res","status","json","data","accountStore","message","body","firstName","lastName","email","type","balance","usersAccount","id","length","accountNumber","Math","floor","random","parseFloat","toFixed","push","openingBalance","params","console","log","existingAccount","find","account","parseInt","accountdelete","indexOf","splice"],"mappings":"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","sourcesContent":["import accountStore from '../utilities/dummyData/account';\n\n\n/**\n * @exports\n * @class DummyControllerAccountï¿¼1\n */\nclass DummyControllerAcccount {\n  /**\n   * @description get all accounts\n   * @staticmethod getAllAccounts\n   * @param  {object} req - req object\n   * @param {object} res - Response object\n   * @return {json} res.json\n   */\n  static getAllAccounts(req, res) {\n    res.status(200).json({\n      status: 200,\n      data: accountStore,\n      message: 'Successfully fetched all accounts',\n    });\n  }\n\n\n  /**\n   * @description Create Bank Account\n   * @staticmethod CreateBankAccount\n   * @param  {object} req - req object\n   * @param {object} res - Response object\n   * @return {json} res.json\n   */\n  static CreateBankAccounts(req, res) {\n    const {\n      firstName,\n      lastName,\n      email,\n      type,\n      balance,\n    } = req.body;\n\n    const usersAccount = {\n      id: accountStore.length + 1,\n      accountNumber: Math.floor(Math.random() * 9000000000) + 1000000000,\n      firstName,\n      lastName,\n      email,\n      type,\n      status: 'active',\n      balance: parseFloat(balance, 10).toFixed(2),\n    };\n\n    accountStore.push(usersAccount);\n    return res.status(201).json({\n      status: 201,\n      data: {\n        accountNumber: usersAccount.accountNumber,\n        firstName: usersAccount.firstName,\n        lastName: usersAccount.lastName,\n        email: usersAccount.email,\n        type: usersAccount.type,\n        openingBalance: usersAccount.balance,\n      },\n      message: 'Account created successfully',\n    });\n  }\n\n\n  /**\n   * @description update an account using patch verb method\n   * @staticmethod PatchBankAccount update an account\n   * @param  {object} req - req object\n   * @param {object} res - Response object\n   * @return {json} res.json\n   */\n  static PatchBankAccounts(req, res) {\n    const {\n      accountNumber,\n    } = req.params;\n    console.log(accountNumber);\n    const existingAccount = accountStore.find(account => account.accountNumber === parseInt(accountNumber, 10));\n\n    if (existingAccount) {\n      const {\n        status,\n      } = req.body;\n      existingAccount.status = status;\n      return res.status(201).json({\n        status: 201,\n        data: {\n          accountNumber,\n          status,\n        },\n        message: 'account status changed  successfull',\n      });\n    }\n    return res.status(404).json({\n      status: 404,\n      message: 'This account  does not exist',\n    });\n  }\n\n\n  /**\n   * @description delete an existing account\n   * @staticmethod DeleteAccount\n   * @param  {object} req - req object\n   * @param {object} res - Response object\n   * @return {json} res.json\n   */\n  static DeleteAccount(req, res) {\n    const {\n      accountNumber,\n    } = req.params;\n    console.log(accountNumber);\n    const existingAccount = accountStore.find(account => account.accountNumber === parseInt(accountNumber, 10));\n\n    if (existingAccount) {\n      const accountdelete = accountStore.indexOf(existingAccount);\n      accountStore.splice(accountdelete, 1);\n      return res.status(201).json({\n        status: 201,\n        message: 'Account Succesfully deleted',\n\n      });\n    }\n    return res.status(400).json({\n      status: 400,\n      message: 'This account  does not exist',\n    });\n  }\n}\n\n\nexport default DummyControllerAcccount;\n"],"file":"dummyControllerAccount.js"}